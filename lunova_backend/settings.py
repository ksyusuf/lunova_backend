"""
Django settings for lunova_backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import environ
import dj_database_url
import os
from django.core.exceptions import ImproperlyConfigured

# Build paths
BASE_DIR = Path(__file__).resolve().parent.parent

# Env setup
env = environ.Env(
    DEBUG=(bool, False)
)

env_file = BASE_DIR / '.env'
if env_file.exists():
    env.read_env(env_file)

# DATABASE - Production ve Local için
if os.getenv('DATABASE_URL'):
    # Production (Railway)
    DATABASES = {
        'default': dj_database_url.config(default=os.getenv('DATABASE_URL'))
    }
else:
    # Local geliştirme (parçalı env değişkenleri)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env('DB_NAME'),
            'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'),
            'HOST': env('DB_HOST'),
            'PORT': env.int('DB_PORT', default=5432)
        }
    }

# STATIC_ROOT (production)
STATIC_ROOT = 'staticfiles'

# Quick-start Development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

# Application definition
INSTALLED_APPS = [
    # Django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 3rd-party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_extensions',  # Bu satırı ekle

    # Senin app'lerin
    'accounts',  # kullanıcı yönetim uygulaman
    'api',
    'zoom',  # Zoom entegrasyonu
    'appointments',  # Randevu yönetimi
    'forms',  # Form yönetimi
    'rest_framework_simplejwt.token_blacklist',
    'availability',  # Uzman uygunluk yönetimi
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # React ile haberleşmek için
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lunova_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lunova_backend.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_CREDENTIALS = True

# Custom header'lara izin ver
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-frontend-type',  # Custom header'ımız
]

USE_X_FORWARDED_HOST = True

# Environment - required
ENVIRONMENT = env('ENVIRONMENT')
if not ENVIRONMENT:
    raise ImproperlyConfigured("ENVIRONMENT environment variable is required!")

ENVIRONMENT = ENVIRONMENT.lower()
IS_PRODUCTION = ENVIRONMENT == 'production'

# Frontend URLs - JSON format
frontend_urls_json = env('FRONTEND_URLS')
if not frontend_urls_json:
    raise ImproperlyConfigured("FRONTEND_URLS environment variable is required!")

try:
    FRONTEND_URLS = env.json('FRONTEND_URLS')
    # Required roles kontrolü
    required_roles = ['expert', 'client', 'admin']
    for role in required_roles:
        if role not in FRONTEND_URLS:
            raise ImproperlyConfigured(f"Frontend URL for role '{role}' is missing!")
            
    # CORS için tüm frontend URL'lerini al (value'ları)
    CORS_ALLOWED_ORIGINS = list(FRONTEND_URLS.values())
    if not CORS_ALLOWED_ORIGINS:
        raise ImproperlyConfigured("No frontend URLs found for CORS!")
    
    # ALLOWED_HOSTS için tüm frontend URL'lerini al (value'ları)
    ALLOWED_HOSTS = list(FRONTEND_URLS.values())
    if not ALLOWED_HOSTS:
        raise ImproperlyConfigured("No frontend URLs found for CORS!")
        
except ValueError as e:
    raise ImproperlyConfigured(f"Invalid FRONTEND_URLS JSON format: {e}")

# Session ve CSRF
if IS_PRODUCTION:
    SESSION_COOKIE_DOMAIN = env('SESSION_COOKIE_DOMAIN')
    if not SESSION_COOKIE_DOMAIN:
        raise ImproperlyConfigured("SESSION_COOKIE_DOMAIN environment variable is required!")
else:
    SESSION_COOKIE_DOMAIN = None

CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS

# HTTPS reverse proxy arkasında çalışırken güvenli protokolü algılaması için:
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'accounts.authentication.CookieJWTAuthentication',
    ),
}

AUTH_USER_MODEL = 'accounts.User'

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

MEDIA_ROOT = env('MEDIA_ROOT', default=BASE_DIR / 'media')
MEDIA_URL = env('MEDIA_URL', default='/media/')

# Email Settings
EMAIL_BACKEND = env('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = env('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = env.int('EMAIL_PORT', default=587)
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)
EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')

# Zoom API Settings
ZOOM_CLIENT_ID = env('ZOOM_CLIENT_ID')
ZOOM_CLIENT_SECRET = env('ZOOM_CLIENT_SECRET')
ZOOM_ACCOUNT_ID = env('ZOOM_ACCOUNT_ID')
